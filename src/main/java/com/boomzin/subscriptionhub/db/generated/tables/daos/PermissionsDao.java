/*
 * This file is generated by jOOQ.
 */
package com.boomzin.subscriptionhub.db.generated.tables.daos;


import com.boomzin.subscriptionhub.db.generated.tables.Permissions;
import com.boomzin.subscriptionhub.db.generated.tables.records.PermissionsRecord;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PermissionsDao extends DAOImpl<PermissionsRecord, com.boomzin.subscriptionhub.db.generated.tables.pojos.Permissions, UUID> {

    /**
     * Create a new PermissionsDao without any configuration
     */
    public PermissionsDao() {
        super(Permissions.PERMISSIONS, com.boomzin.subscriptionhub.db.generated.tables.pojos.Permissions.class);
    }

    /**
     * Create a new PermissionsDao with an attached configuration
     */
    public PermissionsDao(Configuration configuration) {
        super(Permissions.PERMISSIONS, com.boomzin.subscriptionhub.db.generated.tables.pojos.Permissions.class, configuration);
    }

    @Override
    public UUID getId(com.boomzin.subscriptionhub.db.generated.tables.pojos.Permissions object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.boomzin.subscriptionhub.db.generated.tables.pojos.Permissions> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Permissions.PERMISSIONS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.boomzin.subscriptionhub.db.generated.tables.pojos.Permissions> fetchById(UUID... values) {
        return fetch(Permissions.PERMISSIONS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.boomzin.subscriptionhub.db.generated.tables.pojos.Permissions fetchOneById(UUID value) {
        return fetchOne(Permissions.PERMISSIONS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.boomzin.subscriptionhub.db.generated.tables.pojos.Permissions> fetchOptionalById(UUID value) {
        return fetchOptional(Permissions.PERMISSIONS.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.boomzin.subscriptionhub.db.generated.tables.pojos.Permissions> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Permissions.PERMISSIONS.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.boomzin.subscriptionhub.db.generated.tables.pojos.Permissions> fetchByName(String... values) {
        return fetch(Permissions.PERMISSIONS.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public com.boomzin.subscriptionhub.db.generated.tables.pojos.Permissions fetchOneByName(String value) {
        return fetchOne(Permissions.PERMISSIONS.NAME, value);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public Optional<com.boomzin.subscriptionhub.db.generated.tables.pojos.Permissions> fetchOptionalByName(String value) {
        return fetchOptional(Permissions.PERMISSIONS.NAME, value);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.boomzin.subscriptionhub.db.generated.tables.pojos.Permissions> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Permissions.PERMISSIONS.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<com.boomzin.subscriptionhub.db.generated.tables.pojos.Permissions> fetchByDescription(String... values) {
        return fetch(Permissions.PERMISSIONS.DESCRIPTION, values);
    }
}
