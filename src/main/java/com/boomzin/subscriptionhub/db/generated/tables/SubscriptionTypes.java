/*
 * This file is generated by jOOQ.
 */
package com.boomzin.subscriptionhub.db.generated.tables;


import com.boomzin.subscriptionhub.db.generated.DefaultSchema;
import com.boomzin.subscriptionhub.db.generated.Keys;
import com.boomzin.subscriptionhub.db.generated.tables.Subscriptions.SubscriptionsPath;
import com.boomzin.subscriptionhub.db.generated.tables.records.SubscriptionTypesRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.18"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SubscriptionTypes extends TableImpl<SubscriptionTypesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>subscription_types</code>
     */
    public static final SubscriptionTypes SUBSCRIPTION_TYPES = new SubscriptionTypes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubscriptionTypesRecord> getRecordType() {
        return SubscriptionTypesRecord.class;
    }

    /**
     * The column <code>subscription_types.id</code>.
     */
    public final TableField<SubscriptionTypesRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>subscription_types.name</code>.
     */
    public final TableField<SubscriptionTypesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>subscription_types.duration_days</code>.
     */
    public final TableField<SubscriptionTypesRecord, Integer> DURATION_DAYS = createField(DSL.name("duration_days"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>subscription_types.price</code>.
     */
    public final TableField<SubscriptionTypesRecord, BigDecimal> PRICE = createField(DSL.name("price"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>subscription_types.features</code>.
     */
    public final TableField<SubscriptionTypesRecord, JSONB> FEATURES = createField(DSL.name("features"), SQLDataType.JSONB, this, "");

    private SubscriptionTypes(Name alias, Table<SubscriptionTypesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SubscriptionTypes(Name alias, Table<SubscriptionTypesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>subscription_types</code> table reference
     */
    public SubscriptionTypes(String alias) {
        this(DSL.name(alias), SUBSCRIPTION_TYPES);
    }

    /**
     * Create an aliased <code>subscription_types</code> table reference
     */
    public SubscriptionTypes(Name alias) {
        this(alias, SUBSCRIPTION_TYPES);
    }

    /**
     * Create a <code>subscription_types</code> table reference
     */
    public SubscriptionTypes() {
        this(DSL.name("subscription_types"), null);
    }

    public <O extends Record> SubscriptionTypes(Table<O> path, ForeignKey<O, SubscriptionTypesRecord> childPath, InverseForeignKey<O, SubscriptionTypesRecord> parentPath) {
        super(path, childPath, parentPath, SUBSCRIPTION_TYPES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    @Generated(
        value = {
            "https://www.jooq.org",
            "jOOQ version:3.19.18"
        },
        comments = "This class is generated by jOOQ"
    )
    public static class SubscriptionTypesPath extends SubscriptionTypes implements Path<SubscriptionTypesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SubscriptionTypesPath(Table<O> path, ForeignKey<O, SubscriptionTypesRecord> childPath, InverseForeignKey<O, SubscriptionTypesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SubscriptionTypesPath(Name alias, Table<SubscriptionTypesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SubscriptionTypesPath as(String alias) {
            return new SubscriptionTypesPath(DSL.name(alias), this);
        }

        @Override
        public SubscriptionTypesPath as(Name alias) {
            return new SubscriptionTypesPath(alias, this);
        }

        @Override
        public SubscriptionTypesPath as(Table<?> alias) {
            return new SubscriptionTypesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<SubscriptionTypesRecord> getPrimaryKey() {
        return Keys.SUBSCRIPTION_TYPES_PKEY;
    }

    @Override
    public List<UniqueKey<SubscriptionTypesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.SUBSCRIPTION_TYPES_NAME_KEY);
    }

    private transient SubscriptionsPath _subscriptions;

    /**
     * Get the implicit to-many join path to the
     * <code>subscription_system.subscriptions</code> table
     */
    public SubscriptionsPath subscriptions() {
        if (_subscriptions == null)
            _subscriptions = new SubscriptionsPath(this, null, Keys.SUBSCRIPTIONS__SUBSCRIPTIONS_TYPE_ID_FKEY.getInverseKey());

        return _subscriptions;
    }

    @Override
    public SubscriptionTypes as(String alias) {
        return new SubscriptionTypes(DSL.name(alias), this);
    }

    @Override
    public SubscriptionTypes as(Name alias) {
        return new SubscriptionTypes(alias, this);
    }

    @Override
    public SubscriptionTypes as(Table<?> alias) {
        return new SubscriptionTypes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SubscriptionTypes rename(String name) {
        return new SubscriptionTypes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubscriptionTypes rename(Name name) {
        return new SubscriptionTypes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SubscriptionTypes rename(Table<?> name) {
        return new SubscriptionTypes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubscriptionTypes where(Condition condition) {
        return new SubscriptionTypes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubscriptionTypes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubscriptionTypes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubscriptionTypes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SubscriptionTypes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SubscriptionTypes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SubscriptionTypes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SubscriptionTypes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubscriptionTypes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SubscriptionTypes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
