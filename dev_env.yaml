version: '3'

services:

  flyway:
    container_name: flyway
    build:
      context: ./
      dockerfile: ./docker_for_dev/flyway/Dockerfile
    environment:
     - TZ=Europe/Moscow
    volumes:
      - ./db/migration/:/flyway/sql:ro
    depends_on:
      haproxy:
        condition: service_healthy

  postgres1:
    container_name: postgres1
    build:
      context: ./docker_for_dev/postgresql
      dockerfile: Dockerfile
    healthcheck:
      test: |
          bash -c 'pg_isready -p 25432'
      interval: 10s
      timeout: 5s
      retries: 10
    environment:
      TZ: Europe/Moscow
      ETCD_DATA_DIR: /run/etcd.data
      ETCD_INITIAL_CLUSTER_TOKEN: etcd-token-db-dev
      ETCD_NAME: etcd1
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://postgres1:2380
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://postgres1:2379
      ETCD_INITIAL_CLUSTER: etcd1=http://postgres1:2380,etcd2=http://postgres2:2380,etcd3=http://haproxy:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_LOG_OUTPUTS: stdout
    volumes:
      - ./docker_for_dev/data/postgres1/etcd:/run/etcd.data
      - ./docker_for_dev/data/postgres1/pgsql:/database
      - ./docker_for_dev/postgresql/patroni1.yaml:/etc/patroni.yml
      - /tmp:/tmp
    restart: always

  postgres2:
    container_name: postgres2
    build:
      context: ./docker_for_dev/postgresql
      dockerfile: Dockerfile
    healthcheck:
        test: |
          bash -c 'pg_isready -p 25432'
        interval: 10s
        timeout: 5s
        retries: 10
    environment:
      TZ: Europe/Moscow
      ETCD_DATA_DIR: /run/etcd.data
      ETCD_INITIAL_CLUSTER_TOKEN: etcd-token-db-dev
      ETCD_NAME: etcd2
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://postgres2:2380
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://postgres2:2379
      ETCD_INITIAL_CLUSTER: etcd1=http://postgres1:2380,etcd2=http://postgres2:2380,etcd3=http://haproxy:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_LOG_OUTPUTS: stdout
    volumes:
      - ./docker_for_dev/data/postgres2/etcd:/run/etcd.data
      - ./docker_for_dev/data/postgres2/pgsql:/database
      - ./docker_for_dev/postgresql/patroni2.yaml:/etc/patroni.yml
      - /tmp:/tmp
    restart: always

  haproxy:
    container_name: haproxy
    build:
      context: ./docker_for_dev/haproxy
      dockerfile: Dockerfile
    healthcheck:
        test: |
          bash -c 'exec 3<>/dev/tcp/127.0.0.1/80; echo -e "GET / HTTP/1.1\nConnection: close\n" >&3; cat <&3 | grep -q "200 OK"'
        interval: 10s
        timeout: 5s
        retries: 5
    environment:
      TZ: Europe/Moscow
      ETCD_DATA_DIR: /run/etcd.data
      ETCD_INITIAL_CLUSTER_TOKEN: etcd-token-db-dev
      ETCD_NAME: etcd3
      ETCD_INITIAL_ADVERTISE_PEER_URLS: http://haproxy:2380
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://haproxy:2379
      ETCD_INITIAL_CLUSTER: etcd1=http://postgres1:2380,etcd2=http://postgres2:2380,etcd3=http://haproxy:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_LOG_OUTPUTS: stdout
    ports:
      - 5432:5432
      - 5433:5433
    volumes:
      - ./docker_for_dev/data/etcd:/run/etcd.data
      - ./docker_for_dev/haproxy/haproxy.cfg:/etc/haproxy/haproxy.cfg
    restart: always
